let g:python3_host_prog = '/opt/boxen/pyenv/shims/python'
" Install vim-plug if not available {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
  \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
" }}}

" Vim plugins
" ================

call plug#begin('~/.vim/plugged')

" Tags
Plug 'ludovicchabant/vim-gutentags'

" Functionalities

" Auto Pairs {{{
Plug 'jiangmiao/auto-pairs'
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsMultilineClose = 1
" }}}

" CtrlSF {{{
Plug 'dyng/ctrlsf.vim'
let g:ctrlsf_position = 'left'
let g:ctrlsf_winsize = '80'
let g:ctrlsf_indent = 2
nmap <leader>/ <Plug>CtrlSFPrompt
vmap <leader>/ <Plug>CtrlSFVwordPath
au FileType ctrlsf setlocal norelativenumber
au FileType ctrlsf setlocal nonumber
" }}}

" Plug 'Shougo/deoplete.nvim' | Plug 'Shougo/neoinclude.vim'
" requiere python3
" Deoplete {{{
if has('python3')
  Plug 'Shougo/deoplete.nvim'
  let g:deoplete#enable_at_startup = 1
  "    inoremap <silent><expr> <Tab>
  "  \ pumvisible() ? "\<C-n>" :
  "  \ deoplete#mappings#manual_complete()
  " Autocomplete
  " set completeopt+=noinsert
endif
" }}}

" Editorconfig {{{
if has('python')
  Plug 'editorconfig/editorconfig-vim'
endif
" }}}

" FZF {{{
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
nmap <leader>f :FZF <cr>
if executable('ag')
  let $FZF_DEFAULT_COMMAND='ag -l -g ""'
endif
nmap <leader>f :Files <cr>
nmap <leader>b :Buffers <cr>
" Escapes on esc
au FileType fzf tnoremap <nowait><buffer> <esc> <c-g>
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
" Default fzf layout
let g:fzf_layout = { 'down': '30%' }
" inoremap <expr> <c-x><c-k> fzf#complete('cat /usr/share/dict/words')
" }}}

" Neomake {{{
Plug 'benekastah/neomake', { 'on': ['Neomake'] }
let g:neomake_verbose = 0
augroup Neomake
  au!
  au! BufWritePost * Neomake
augroup END
" }}}
" Neoterm {{{
Plug 'kassio/neoterm', { 'on': 'T' }
let g:neoterm_position = 'vertical'
let test#strategy = 'neovim'
let test#runners = {'Javascript': ['Teaspoon']}
nmap <leader>T :TestFile<CR>
nmap <leader>t :TestNearest<CR>
nmap <leader>l :TestLast<CR>
" nmap <leader>g :TestVisit<CR>
" }}}

" Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" Nerdtree {{{
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
map <leader>d :NERDTreeToggle<cr>
map <leader>D :NERDTreeFind<cr>
let g:NERDTreeMinimalUI = 1
let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeIgnore=[
  \ '\.git$',
  \ '\.sass-cache$',
  \ '\.tmp$',
  \ 'tags$',
  \ 'tmp$',
  \ 'node_modules$' ]
" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
exec 'au FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
exec 'au FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction
" Code
call NERDTreeHighlightFile('js', 'yellow', 'none', 'yellow', 'none')
call NERDTreeHighlightFile('rb', 'yellow', 'none', 'yellow', 'none')
" Templates
call NERDTreeHighlightFile('html', 'red', 'none', 'red', 'none')
call NERDTreeHighlightFile('jsx', 'red', 'none', 'red', 'none')
call NERDTreeHighlightFile('jade', 'red', 'none', 'red', 'none')
call NERDTreeHighlightFile('haml', 'red', 'none', 'red', 'none')
call NERDTreeHighlightFile('erb', 'red', 'none', 'red', 'none')
" Stylesheets
call NERDTreeHighlightFile('css', 'green', 'none', '#c594c5', 'none')
call NERDTreeHighlightFile('scss', 'green', 'none', '#c594c5', 'none')
" Configuration
call NERDTreeHighlightFile('yml', 'gray', 'none', 'gray', 'none')
call NERDTreeHighlightFile('json', 'gray', 'none', 'gray', 'none')
call NERDTreeHighlightFile('jbuilder', 'gray', 'none', 'gray', 'none')
call NERDTreeHighlightFile('sh', 'gray', 'none', 'gray', 'none')
" Other
call NERDTreeHighlightFile('md', 'blue', 'none', 'blue', 'none')
" }}}

" Tagbar {{{
Plug 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>
" }}}

" Tmux Focus Events {{{
Plug 'tmux-plugins/vim-tmux-focus-events'
" }}}

" Vim Coloresque {{{
Plug 'gorodinskiy/vim-coloresque', { 'for': ['css', 'sass', 'scss', 'less'] }
" }}}

" Vim Commentary {{{
Plug 'tpope/vim-commentary'
" }}}

" Vim easy align {{{
Plug 'junegunn/vim-easy-align'
" }}}

" Vim Easymotion {{{
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_do_mapping = 0 " Disable default mappings
nmap s <Plug>(easymotion-s2)
" }}}

" Vim Eighties {{{
Plug 'justincampbell/vim-eighties'
" }}}

" Vim Multiple Curors {{{
Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode  = 0
" }}}

" Vim Repeat {{{
Plug 'tpope/vim-repeat'
" }}}

" Vim Surround {{{
Plug 'tpope/vim-surround'
" }}}

" Vim Sayonara {{{
Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' }
nnoremap <leader>q :Sayonara!<cr>
nnoremap <leader>Q :Sayonara<cr>
" }}}

" Vim Sensible {{{
Plug 'tpope/vim-sensible'
" }}}

" Vim Test {{{
Plug 'janko-m/vim-test', { 'on': ['TestFile', 'TestLast', 'TestNearest', 'TestSuite', 'TestVisit'] }
" let g:test#strategy = 'neoterm'
let g:test#strategy = 'neovim'
nmap <leader>T :TestFile<CR>
nmap <leader>t :TestNearest<CR>
nmap <leader>l :TestLast<CR>
" }}}

" Vim Tmux Navigator {{{
Plug 'christoomey/vim-tmux-navigator'
" }}}

" ViMux {{{
Plug 'benmills/vimux'
" }}}

" NeoSnippet {{{
if has('python')
  Plug 'Shougo/neosnippet' | Plug 'Shougo/neosnippet-snippets'
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " imap <expr><TAB>
  "  \ pumvisible() ? "\<C-n>" :
  "  \ neosnippet#expandable_or_jumpable() ?
  "  \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
endif
" }}}

" Cosmetic
" =============================================================================
" Color themes {{{
" Plug 'chriskempson/base16-vim'
" let base16colorspace=256
" }}}
" Indent Line {{{
Plug 'Yggdroot/indentLine'
let g:indentLine_enabled=0
"let g:indentLine_leadingSpaceEnabled=1
let g:indentLine_fileTypeExclude=['jade']
" }}}
" Vim Signify {{{
Plug 'airblade/vim-gitgutter'
let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
" }}}
" Vim Indexed Search {{{
Plug 'henrik/vim-indexed-search'
" }}}
" Vim Polyglot {{{
Plug 'sheerun/vim-polyglot'
let g:ruby_no_expensive=1
let g:polyglot_disabled = ['javascript']
" }}}

" External services
" =============================================================================
" Gist {{{
Plug 'mattn/gist-vim', { 'on': ['Gist'] } | Plug 'mattn/webapi-vim'
let g:gist_clip_command = 'xclip -selection clipboard'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_show_privates = 1
" }}}
" ZeaVim {{{
Plug 'KabbAmine/zeavim.vim'
let g:zv_added_files_type = {
    \ 'js': 'Javascript',
    \ 'md': 'Markdown',
    \ 'scss': 'Sass',
    \ }
" }}}

" Ruby specific
" =============================================================================
" Hookup {{{
Plug 'tpope/hookup'
" }}}
" Vim bundler {{{
Plug 'tpope/vim-bundler'
" }}}
" Vim Endwise {{{
Plug 'tpope/vim-endwise'
" }}}
" Vim Rails {{{
Plug 'tpope/vim-rails'
nmap <leader>a :A <cr>
nmap <leader>av :AV <cr>
" }}}
" Vim Ruby Interpolation {{{
Plug 'p0deje/vim-ruby-interpolation', { 'for': ['ruby'] }
" }}}
" Vim Ruby Refactoring {{{
Plug 'ecomba/vim-ruby-refactoring', { 'for': ['ruby'] }
" }}}
Plug 'vim-ruby/vim-ruby'
Plug 'ngmy/vim-rubocop'

" Javascript specific
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'burnettk/vim-angular'
Plug 'claco/jasmine.vim'
Plug 'mxw/vim-jsx'

" Plug 'marijnh/tern_for_vim', { 'do': 'npm install && npm install tern-coffee', 'for': ['javascript'] }
" Javascript specific
" =============================================================================
" Angular vim snippets {{{
Plug 'matthewsimo/angular-vim-snippets'
" }}}
" Reactjs snippets {{{
Plug 'justinj/vim-react-snippets'
" }}}

call plug#end()

" Vim Plug key maps {{{
nmap <leader>pu :PlugUpdate<CR>
nmap <leader>pU :PlugUpgrade<CR>
nmap <leader>pc :PlugClean<CR>
nmap <leader>pi :PlugInstall<CR>
" }}}

set background=dark
" colorscheme base16-eighties
"Remove ugly split separators
hi VertSplit ctermbg=NONE guibg=NONE
" Higlight line number
hi CursorLineNr guifg=#f0c674


Plug 'ctags.vim'
" Plug 'ctrlpvim/ctrlp.vim'
" Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign']  }
" Plug 'justincampbell/vim-eighties'
" Plug 'tpope/vim-eunuch'
" Doesn't work with zsh
" Plug 'airblade/vim-gitgutter'
" Plug 'tpope/vim-fugitive'
" Plug 'terryma/vim-multiple-cursors'
" Plug 'kassio/neoterm'
Plug 'Shougo/neosnippet.vim' | Plug 'Shougo/neosnippet-snippets'
" Plug 'mhinz/vim-sayonara'
" Plug 'mtth/scratch.vim'
" Plug 'tpope/vim-sensible'
Plug 'rstacruz/sparkup'
" Plug 'tpope/vim-surround'
Plug 'tomtom/tcomment_vim'
" Plug 'christoomey/vim-tmux-navigator'
Plug 'janko-m/vim-test'

" Cosmetic
Plug 'Yggdroot/indentLine'
Plug 'henrik/vim-indexed-search'
" Plug 'valloric/MatchTagAlways'
Plug 'bling/vim-airline' | Plug 'edkolev/tmuxline.vim'
Plug 'w0ng/vim-hybrid'
Plug 'jnurmine/zenburn'
Plug 'chriskempson/base16-vim'
Plug 'tomasr/molokai'
Plug 'cschlueter/vim-wombat'
Plug 'altercation/vim-colors-solarized'
Plug 'AlxHnr/clear_colors'
Plug 'jpo/vim-railscasts-theme'

" Typescript specific
Plug 'leafgarland/typescript-vim'

call plug#end()

" PLUGIN CONFIGURATION
" ====================

" Dark backgrounds
" set background=dark
" Tomorrow theme
colorscheme railscasts
" clear_colors_dark
" zenburn
" base16-tomorrow
" custom colors
hi DiffChange guifg=#d7d7ff guibg=#5F5F87
hi DiffDelete gui=NONE guifg=#1d1f21 guibg=#cc6666
hi DiffText gui=NONE guifg=#1d1f21 guibg=#81a2be
hi Search guifg=#1d1f21 guibg=#f0c674
hi CursorLine gui=bold

" Airline
" =======
let g:airline_theme = "tomorrow"                                               " Set theme to powerline default theme
let g:airline_powerline_fonts = 1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_y =''
let g:airline#extensions#hunks#enabled=0                                       " Disable gitgutter info
let g:airline#extensions#tabline#enabled = 1                                   " Enable tabline extension
let g:airline#extensions#tabline#left_alt_sep = '│'                            " Right separator for tabline
let g:airline#extensions#tmuxline#enabled = 0

" Auto-pairs
" ==========
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsMultilineClose = 1

" Better whitespace
" =====================
let g:better_whitespace_filetypes_blacklist=['ctrlsf']

" IndentLine
" ==========
let g:indentLine_color_gui = '#999999'
" let g:indentLine_char = '︙'

" CtrlSF
" ======
let g:ctrlsf_position = 'left'
let g:ctrlsf_winsize = '80'
let g:ctrlsf_indent = 2
let g:ctrlsf_ackprg = 'ack'
nmap <leader>/ <Plug>CtrlSFPrompt
autocmd FileType ctrlsf setlocal norelativenumber
autocmd FileType ctrlsf setlocal nonumber

" CtrlP
" =====

" more results
let g:ctrlp_max_height = 20
let g:ctrlp_use_caching = 0
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_map = '<leader>f'
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>m :CtrlPMRU<CR>

" Eighties
" ===========

let g:eighties_enabled = 1

" GitGutter
" =========
" let g:gitgutter_override_sign_column_highlight = 0
" let g:gitgutter_realtime = 0                                                   "Disable gitgutter in realtime
" let g:gitgutter_eager = 0                                                      "Disable gitgutter to eager load on tab or buffer switch
" set shell=/bin/zsh

" Javascript Libraries Syntax
" ===========================

let g:used_javascript_libs = 'underscore,jquery,angularjs,jasmine'

" JSX
" ===

let g:jsx_ext_required = 0                                                     " Allow JSX in normal JS files

" Neosnippets
" ===========

" For snippet_complete marker.
set conceallevel=2 concealcursor=niv

" NerdTree
" ========

map <leader>d :NERDTreeToggle<cr>
let g:NERDTreeChDirMode = 2                                                     "Always change the root directory
let g:NERDTreeMinimalUI = 1                                                     "Disable help text and bookmark title
let g:NERDTreeShowHidden = 1                                                    "Show hidden files in NERDTree
let g:NERDTreeIgnore=['\.git$', '\.sass-cache$', '\.vagrant']
let g:NERDTreeWinSize = 40

" Rails
" =====

nmap <leader>a :A <cr>
nmap <leader>av :AV <cr>

" Sayonara
" ========

nnoremap <leader>q :Sayonara<cr>
nnoremap <leader>Q :Sayonara!<cr>

" Test
" ====

" TmuxLine
" ========

let g:tmuxline_theme = 'tomorrow'
let g:tmuxline_powerline_separators = 0
